module.exports = [{"name":"DateTimePicker","description":"Mini all-in-one DateTime picker that allows you\nto select a date followed by a time without \nhaving a bulky interface","props":{"value":{"type":{"name":"object"},"required":false,"description":"datetime moment object.","defaultValue":{"value":"moment().locale(locale)","computed":true}},"locale":{"type":{"name":"string"},"required":false,"description":"Locale code.","defaultValue":{"value":"'en'","computed":false}},"showHeader":{"type":{"name":"bool"},"required":false,"description":"Shows the header in the view.","defaultValue":{"value":"true","computed":false}},"isOpen":{"type":{"name":"bool"},"required":false,"description":"Open/closes the picker when set to true or false.","defaultValue":{"value":"false","computed":false}},"autoclose":{"type":{"name":"bool"},"required":false,"description":"Closes the picker after selecting a date.","defaultValue":{"value":"false","computed":false}},"inline":{"type":{"name":"bool"},"required":false,"description":"Views the picker inline.","defaultValue":{"value":"false","computed":false}},"setOnSelect":{"type":{"name":"bool"},"required":false,"description":"Updates picker model after selecting a date in each view.","defaultValue":{"value":"true","computed":false}},"today":{"type":{"name":"bool"},"required":false,"description":"Highlights the current day.","defaultValue":{"value":"true","computed":false}},"keyboard":{"type":{"name":"bool"},"required":false,"description":"Allows using the keyboard to navigate the picker.","defaultValue":{"value":"false","computed":false}},"format":{"type":{"name":"string"},"required":false,"description":"Format of the output value and min/max date.","defaultValue":{"value":"'LL LTS'","computed":false}},"minView":{"type":{"name":"string"},"required":false,"description":"Minimum navigable view.","defaultValue":{"value":"'decade'","computed":false}},"maxView":{"type":{"name":"string"},"required":false,"description":"Maximum navigable view.","defaultValue":{"value":"'minute'","computed":false}},"startView":{"type":{"name":"string"},"required":false,"description":"Initial view when the picker is open.","defaultValue":{"value":"'year'","computed":false}},"minDate":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Represents the minimum selectable date (as String in the same format of the value, or as a Moment.js object)."},"maxDate":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Represents the maximum selectable date (as String in the same format of the value, or as a Moment.js object)."},"startDate":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disables the picker if true","defaultValue":{"value":"false","computed":false}},"position":{"type":{"name":"string"},"required":false,"description":"Sets a fixed position for the picker [\"top left\", \"top right\", \"bottom left\", \"bottom right\"]"},"validate":{"type":{"name":"bool"},"required":false,"description":"Forces picker value between the range minDate and maxDate.","defaultValue":{"value":"false","computed":false}},"additions":{"type":{"name":"object"},"required":false,"description":"Custom content above and below picker view. { top: undefined, bottom: undefined }","defaultValue":{"value":"{top: undefined, bottom: undefined}","computed":false}},"change":{"type":{"name":"func"},"required":false,"description":"Function fired upon change in picker value."},"selectable":{"type":{"name":"func"},"required":false,"description":"Return true if the given date can be selected in the current view (called for every date in the view)"},"htmlId":{"type":{"name":"string"},"required":true,"description":"A unique html id attribute"},"required":{"type":{"name":"bool"},"required":false,"description":"Is the a required form input field"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport DateTimePickerView from './Views/DateTimePickerView';\n\n\n/**\n * \n * Mini all-in-one DateTime picker that allows you\n * to select a date followed by a time without \n * having a bulky interface\n */\nclass DateTimePicker extends React.Component {\n\n  render() {\n    \n    return (\n      <div className=\"datetime-picker\">\n        <DateTimePickerView {...this.props}/>\n      </div>\n    )\n  }\n}\n\nDateTimePicker.propTypes = {\n  /** datetime moment object. */\n  value: PropTypes.object,\n  /** Locale code. */\n  locale: PropTypes.string,\n  /** Shows the header in the view. */\n  showHeader: PropTypes.bool,\n  /** Open/closes the picker when set to true or false. */\n  isOpen: PropTypes.bool,\n  /** Closes the picker after selecting a date. */\n  autoclose: PropTypes.bool,\n  /** Views the picker inline. */\n  inline: PropTypes.bool,\n  /** Updates picker model after selecting a date in each view. */\n  setOnSelect: PropTypes.bool,\n  /** Highlights the current day. */\n  today: PropTypes.bool,\n  /** Allows using the keyboard to navigate the picker. */\n  keyboard: PropTypes.bool,\n  /** Format of the output value and min/max date. */\n  format: PropTypes.string,\n  /** Minimum navigable view. */\n  minView: PropTypes.string,\n  /** Maximum navigable view. */\n  maxView: PropTypes.string,\n  /** Initial view when the picker is open. */\n  startView: PropTypes.string,\n  /** Represents the minimum selectable date (as String in the same format of the value, or as a Moment.js object). */\n  minDate: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]),\n  /** Represents the maximum selectable date (as String in the same format of the value, or as a Moment.js object). */\n  maxDate: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]),\n  startDate:   PropTypes.string,\n  /** Disables the picker if true */\n  disabled: PropTypes.bool,\n  /** Sets a fixed position for the picker [\"top left\", \"top right\", \"bottom left\", \"bottom right\"] */\n  position: PropTypes.string,\n  /** Forces picker value between the range minDate and maxDate. */\n  validate: PropTypes.bool,\n  /** Custom content above and below picker view. { top: undefined, bottom: undefined }*/\n  additions: PropTypes.object,\n  /** Function fired upon change in picker value. */\n  change: PropTypes.func,\n  /** Return true if the given date can be selected in the current view (called for every date in the view) */\n  selectable: PropTypes.func,\n  /** A unique html id attribute  */\n  htmlId: PropTypes.string.isRequired,\n  /** Is the a required form input field */\n  required: PropTypes.bool\n}\n\n/** Defaults */\nconst locale = 'en', format = 'LL LTS';\nDateTimePicker.defaultProps = {\n  locale: locale,\n  showHeader:  true,\n  isOpen: false,\n  autoclose: false,\n  inline: false,\n  setOnSelect: true,\n  today: true,\n  keyboard: false,\n  format: format,\n  minView: 'decade',\n  maxView: 'minute',\n  startView: 'year',\n  value:  moment().locale(locale),\n  disabled: false,\n  validate: false,\n  additions: {top: undefined, bottom: undefined}\n}\n\n\nexport default DateTimePicker;","examples":[{"name":"ExampleDateTimePicker","description":"Standard datepicker with a label","code":"import React from 'react';\nimport DateTimePicker from 'reactive-ux/DateTimePicker';\n\n/**\n * Standard datepicker with a label\n */\nexport default function ExampleDateTimePicker() {\n  return (\n    <DateTimePicker htmlId=\"example-datetime-picker\"/>\n  )\n}"}]},{"name":"HelloWorld","description":"Very basic helloworld implementation.","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Very basic helloworld implementation.\n */\nfunction HelloWorld({message}){\n    return <div>Hello {message} </div>\n}\n\nHelloWorld.propTypes = {\n    /**\n     *  Message to display\n     */\n    message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n    message: 'World'\n}\nexport default HelloWorld;","examples":[{"name":"ExampleHelloWorld","description":"Custom message","code":"import React from 'react';\nimport HelloWorld from 'reactive-ux/HelloWorld';\n\n/**\n * Custom message\n */\nexport default function ExampleHelloWorld() {\n  return (\n    <HelloWorld message=\"Everyone!\" />\n  )\n}"}]}]